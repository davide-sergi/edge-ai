{"version":3,"sources":["webpack:////Users/sergi/work/projects/edge-ai/theia/theia-ide-1.1.0/packages/output/src/common/output-channel.ts","webpack:////Users/sergi/work/projects/edge-ai/theia/theia-ide-1.1.0/packages/output/src/common/output-preferences.ts"],"names":[],"mappings":"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","file":"11.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Emitter, Event } from '@theia/core';\nimport { injectable, inject, postConstruct } from 'inversify';\nimport { OutputPreferences } from './output-preferences';\nimport { Disposable, DisposableCollection } from 'vscode-ws-jsonrpc';\n\n@injectable()\nexport class OutputChannelManager implements Disposable {\n    protected readonly channels = new Map<string, OutputChannel>();\n    protected selectedChannelValue: OutputChannel | undefined;\n\n    protected readonly channelDeleteEmitter = new Emitter<{ channelName: string }>();\n    protected readonly channelAddedEmitter = new Emitter<OutputChannel>();\n    protected readonly selectedChannelEmitter: Emitter<void> = new Emitter<void>();\n    protected readonly listOrSelectionEmitter: Emitter<void> = new Emitter<void>();\n    readonly onChannelDelete = this.channelDeleteEmitter.event;\n    readonly onChannelAdded = this.channelAddedEmitter.event;\n    readonly onSelectedChannelChange = this.selectedChannelEmitter.event;\n    readonly onListOrSelectionChange = this.listOrSelectionEmitter.event;\n\n    protected toDispose = new DisposableCollection();\n\n    @inject(OutputPreferences)\n    protected readonly preferences: OutputPreferences;\n\n    @postConstruct()\n    protected init(): void {\n        this.getChannels().forEach(this.registerListener.bind(this));\n        this.toDispose.push(this.onChannelAdded(channel => {\n            this.listOrSelectionEmitter.fire(undefined);\n            this.registerListener(channel);\n        }));\n        this.toDispose.push(this.onChannelDelete(event => {\n            this.listOrSelectionEmitter.fire(undefined);\n            if (this.selectedChannel && this.selectedChannel.name === event.channelName) {\n                this.selectedChannel = this.getVisibleChannels()[0];\n            }\n        }));\n    }\n\n    protected registerListener(outputChannel: OutputChannel): void {\n        if (!this.selectedChannel) {\n            this.selectedChannel = outputChannel;\n        }\n        this.toDispose.push(outputChannel.onVisibilityChange(event => {\n            if (event.visible) {\n                this.selectedChannel = outputChannel;\n            } else if (outputChannel === this.selectedChannel) {\n                this.selectedChannel = this.getVisibleChannels()[0];\n            }\n        }));\n    }\n\n    getChannel(name: string): OutputChannel {\n        const existing = this.channels.get(name);\n        if (existing) {\n            return existing;\n        }\n        const channel = new OutputChannel(name, this.preferences);\n        this.channels.set(name, channel);\n        this.channelAddedEmitter.fire(channel);\n        return channel;\n    }\n\n    deleteChannel(name: string): void {\n        this.channels.delete(name);\n        this.channelDeleteEmitter.fire({ channelName: name });\n    }\n\n    getChannels(): OutputChannel[] {\n        return Array.from(this.channels.values());\n    }\n\n    getVisibleChannels(): OutputChannel[] {\n        return this.getChannels().filter(channel => channel.isVisible);\n    }\n\n    public dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    get selectedChannel(): OutputChannel | undefined {\n        return this.selectedChannelValue;\n    }\n\n    set selectedChannel(channel: OutputChannel | undefined) {\n        this.selectedChannelValue = channel;\n        this.selectedChannelEmitter.fire(undefined);\n        this.listOrSelectionEmitter.fire(undefined);\n    }\n}\n\nexport enum OutputChannelSeverity {\n    Error = 1,\n    Warning = 2,\n    Info = 3\n}\nexport interface OutputChannelLine {\n    text: string;\n    severity?: OutputChannelSeverity;\n}\n\nexport class OutputChannel {\n\n    private readonly visibilityChangeEmitter = new Emitter<{ visible: boolean }>();\n    private readonly contentChangeEmitter = new Emitter<OutputChannel>();\n    private lines: OutputChannelLine[] = [];\n    private currentLine: OutputChannelLine | undefined;\n    private visible: boolean = true;\n\n    readonly onVisibilityChange: Event<{ visible: boolean }> = this.visibilityChangeEmitter.event;\n    readonly onContentChange: Event<OutputChannel> = this.contentChangeEmitter.event;\n\n    constructor(readonly name: string, readonly preferences: OutputPreferences) { }\n\n    append(value: string): void {\n        if (this.currentLine === undefined) {\n            this.currentLine = { text: value, severity: OutputChannelSeverity.Info };\n        } else {\n            this.currentLine.text += value;\n        }\n        this.contentChangeEmitter.fire(this);\n    }\n\n    appendLine(line: string, severity = OutputChannelSeverity.Info): void {\n        if (this.currentLine !== undefined) {\n            this.currentLine.text = this.currentLine.text + line;\n            this.lines.push(this.currentLine);\n            this.currentLine = undefined;\n        } else {\n            this.lines.push({ text: line, severity });\n        }\n        const maxChannelHistory = this.preferences['output.maxChannelHistory'];\n        if (this.lines.length > maxChannelHistory) {\n            this.lines.splice(0, this.lines.length - maxChannelHistory);\n        }\n        this.contentChangeEmitter.fire(this);\n    }\n\n    clear(): void {\n        this.lines.length = 0;\n        this.currentLine = undefined;\n        this.contentChangeEmitter.fire(this);\n    }\n\n    setVisibility(visible: boolean): void {\n        this.visible = visible;\n        this.visibilityChangeEmitter.fire({ visible });\n    }\n\n    getLines(): OutputChannelLine[] {\n        if (this.currentLine !== undefined) {\n            return [...this.lines, this.currentLine];\n        } else {\n            return this.lines;\n        }\n    }\n\n    get isVisible(): boolean {\n        return this.visible;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces } from 'inversify';\nimport {\n    createPreferenceProxy,\n    PreferenceProxy,\n    PreferenceService,\n    PreferenceContribution,\n    PreferenceSchema\n} from '@theia/core/lib/browser/preferences';\n\nexport const OutputConfigSchema: PreferenceSchema = {\n    'type': 'object',\n    'properties': {\n        'output.maxChannelHistory': {\n            'type': 'number',\n            'description': 'The maximum number of entries in an output channel.',\n            'default': 1000\n        }\n    }\n};\n\nexport interface OutputConfiguration {\n    'output.maxChannelHistory': number\n}\n\nexport const OutputPreferences = Symbol('OutputPreferences');\nexport type OutputPreferences = PreferenceProxy<OutputConfiguration>;\n\nexport function createOutputPreferences(preferences: PreferenceService): OutputPreferences {\n    return createPreferenceProxy(preferences, OutputConfigSchema);\n}\n\nexport function bindOutputPreferences(bind: interfaces.Bind): void {\n    bind(OutputPreferences).toDynamicValue(ctx => {\n        const preferences = ctx.container.get<PreferenceService>(PreferenceService);\n        return createOutputPreferences(preferences);\n    });\n\n    bind(PreferenceContribution).toConstantValue({ schema: OutputConfigSchema });\n}\n"],"sourceRoot":""}